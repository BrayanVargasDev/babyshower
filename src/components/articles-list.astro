---
import type { Articulo } from '../interfaces';
import { supabase } from '../libs/supabase';

const { data, error } = await supabase
  .from('articulos')
  .select('*')
  .neq('totalDisponible', 0)
  .order('totalDisponible', { ascending: false });
---

<!-- Modal -->
<div
  id='giftListModal'
  class='fixed inset-0 z-50 hidden items-center justify-center bg-black/50 transition-all duration-300 ease-in-out'
>
  <div
    class='mx-4 max-h-[90vh] w-full max-w-4xl overflow-hidden rounded-xl bg-white shadow-xl'
  >
    <div
      class='flex items-center justify-between border-b border-[#5C7B28] p-6'
    >
      <h2
        class='text-primary font-title text-[clamp(2rem,3vw,2.25rem)] drop-shadow-md text-shadow-[0_0_2px_#000]'
      >
        Lista de Regalos para Helena
      </h2>
      <button
        id='closeGiftListModal'
        class='cursor-pointer text-2xl text-gray-500 hover:text-gray-700'
        >&times;</button
      >
    </div>
    <div
      class='max-h-[calc(90vh-140px)] overflow-y-auto p-6'
      style='scrollbar-width: thin;'
    >
      <div class='mb-6 rounded-lg border-l-4 border-[#7B963D] bg-[#EAE0B6] p-4'>
        <p class='text-lg leading-relaxed text-black'>
          Â¡Hola queridos familiares y amigos! ðŸ’•
          <br />
          Hemos preparado esta lista con algunos artÃ­culos que nos ayudarÃ­an muchÃ­simo
          en esta nueva aventura. No se sientan obligados, pero si desean contribuir
          con algo especial para Helena, aquÃ­ encontrarÃ¡n algunas ideas que realmente
          necesitamos.
          <br />
          <span class='font-bold text-[#6D8A20]'>ðŸ’¡ Tip:</span> Si ven que un artÃ­culo
          ya no aparece disponible, Â¡es porque alguien mÃ¡s ya tuvo la misma linda
          idea!
          <br />
          Â¡Gracias por ser parte de este momento tan especial! âœ¨
        </p>
      </div>
      <ul class='list-none space-y-2'>
        {
          data?.map((item, index) => (
            <li>
              <div class='font-body flex items-center justify-between rounded-md border border-[#EEE6D2] px-2 py-1 text-lg text-gray-800'>
                <span class='flex items-center gap-2'>{item.nombre}</span>
                <button
                  class='text-primary font-body choose-btn cursor-pointer rounded-lg bg-[#A9C1C3] px-2 py-1 text-[clamp(0.875rem,2.5vw,1rem)] font-semibold shadow-[0_0_2px_#000] transition-all duration-200 hover:scale-110'
                  data-codigo={item.codigo}
                  data-nombre={item.nombre}
                  data-available={item.totalDisponible}
                  data-separated={item.totalApartado}
                  data-index={index}
                >
                  Escoger!
                </button>
              </div>

              {/* Fila de selecciÃ³n que aparecerÃ¡ dinÃ¡micamente */}
              <div class='selection-row mt-2 hidden rounded-md border border-[#7B963D] bg-[#F5F1E8] p-4'>
                <div class='flex flex-col gap-3'>
                  <div class='flex flex-col gap-2'>
                    <label class='text-sm font-semibold text-[#6D8A20]'>
                      Nombre:
                    </label>
                    <input
                      type='text'
                      class='name-input rounded-md border border-[#EEE6D2] px-3 py-2 text-sm focus:border-[#7B963D] focus:outline-none'
                      placeholder='Tu nombre completo'
                      required
                    />
                  </div>

                  <div class='flex flex-col gap-2'>
                    <label class='text-sm font-semibold text-[#6D8A20]'>
                      Cantidad:
                    </label>
                    <input
                      type='number'
                      class='quantity-input rounded-md border border-[#EEE6D2] px-3 py-2 text-sm focus:border-[#7B963D] focus:outline-none'
                      placeholder='Â¿CuÃ¡ntos quieres apartar?'
                      min='1'
                      max={item.totalDisponible}
                      required
                    />
                  </div>

                  <div class='flex justify-end gap-2'>
                    <button class='cancel-btn rounded-md bg-gray-300 px-4 py-2 text-sm text-gray-700 transition-colors hover:bg-gray-400'>
                      Cancelar
                    </button>
                    <button class='save-btn rounded-md bg-[#7B963D] px-4 py-2 text-sm text-white transition-colors hover:bg-[#6D8A20]'>
                      Guardar
                    </button>
                  </div>
                </div>
              </div>
            </li>
          ))
        }
      </ul>
    </div>
  </div>

  <script type='module' lang='ts'>
    document.addEventListener('DOMContentLoaded', function () {
      const openModal = document.getElementById('openGiftListModal');
      const closeModal = document.getElementById('closeGiftListModal');
      const modal = document.getElementById('giftListModal');

      openModal?.addEventListener('click', () => {
        modal?.classList.remove('hidden');
        modal?.classList.add('flex');
      });

      closeModal?.addEventListener('click', () => {
        modal?.classList.add('hidden');
        modal?.classList.remove('flex');
      });

      modal?.addEventListener('click', e => {
        if (e.target === modal) {
          modal.classList.add('hidden');
          modal.classList.remove('flex');
        }
      });

      const chooseButtons = document.querySelectorAll('.choose-btn');

      chooseButtons.forEach(button => {
        button.addEventListener('click', function () {
          document.querySelectorAll('.selection-row').forEach(row => {
            row.classList.add('hidden');
          });

          const listItem = this.closest('li');
          const selectionRow = listItem.querySelector('.selection-row');
          selectionRow.classList.remove('hidden');

          const nameInput = selectionRow.querySelector('.name-input');
          nameInput.focus();
        });
      });

      document.addEventListener('click', function (e) {
        if (e.target && e.target.classList.contains('cancel-btn')) {
          const selectionRow = e.target.closest('.selection-row');
          selectionRow.classList.add('hidden');

          const nameInput = selectionRow.querySelector('.name-input');
          const quantityInput = selectionRow.querySelector('.quantity-input');
          nameInput.value = '';
          quantityInput.value = '';
        }
      });

      document.addEventListener('click', async function (e) {
        if (e.target && e.target.classList.contains('save-btn')) {
          const button = e.target;
          const selectionRow = button.closest('.selection-row');
          const nameInput = selectionRow.querySelector('.name-input');
          const quantityInput = selectionRow.querySelector('.quantity-input');
          const listItem = selectionRow.closest('li');
          const chooseBtn = listItem.querySelector('.choose-btn');

          const name = nameInput.value.trim();
          const quantity = parseInt(quantityInput.value);
          const itemId = chooseBtn.dataset.codigo;
          const itemName = chooseBtn.dataset.nombre;
          const available = parseInt(chooseBtn.dataset.available);
          const separated = parseInt(chooseBtn.dataset.separated) || 0;

          if (!name) {
            alert('Por favor, ingresa tu nombre');
            nameInput.focus();
            return;
          }

          if (!quantity || quantity < 1) {
            alert('Por favor, ingresa una cantidad vÃ¡lida');
            quantityInput.focus();
            return;
          }

          if (quantity > available) {
            alert(`Solo hay ${available} unidades disponibles`);
            quantityInput.focus();
            return;
          }

          button.disabled = true;
          button.textContent = 'Guardando...';

          try {
            const response = await fetch('/api/update-article', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                codigo: itemId,
                totalDisponible: available - quantity,
                totalApartado: separated + quantity,
                nombreAparta: name,
                nombreItem: itemName,
                cantidad: quantity,
              }),
            });

            const result = await response.json();

            if (!response.ok) {
              throw new Error(result.error || 'Error al procesar la solicitud');
            }

            alert(
              `Â¡Perfecto! ${name} ha apartado ${quantity} unidad(es) de ${itemName}`
            );

            selectionRow.classList.add('hidden');

            nameInput.value = '';
            quantityInput.value = '';

            const newAvailable = result.updateData.totalDisponible;
            chooseBtn.dataset.available = newAvailable;

            if (newAvailable === 0) {
              chooseBtn.disabled = true;
              chooseBtn.textContent = 'Agotado';
              chooseBtn.classList.add('opacity-50', 'cursor-not-allowed');
              chooseBtn.classList.remove('hover:scale-110');
            }

            window.location.reload();
          } catch (error) {
            console.error('Error al guardar:', error);
            alert('Hubo un error al guardar. Por favor, intenta de nuevo.');
          } finally {
            button.disabled = false;
            button.textContent = 'Guardar';
          }
        }
      });
    });
  </script>
</div>
